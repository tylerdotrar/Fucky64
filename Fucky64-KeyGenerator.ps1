function Fucky64-KeyGenerator ([string]$Message, [string]$File, [int]$Digits, [int]$Keys, [switch]$Verbose, [switch]$VeryVerbose, [switch]$Pipe) 
{
#.SYNOPSIS
# Calculates potential decryption keys for messages and files generated by 'Fucky64-Encrypt'
# ARBITRARY VERSION NUMBER:  3.2
# AUTHOR:  Tyler McCann (@tyler.rar)
#
#.DESCRIPTION
# This function is a test to see how easy it is to brute force keys for 'Fucky64' encrypted messages. Quickly 
# calculates potential keys within digits 1-5. Slowly calculates potential keys within digits 6-9. A lot of 
# false positives may be generated.
#
# Parameters:
#    -Message       -->    The encrypted / pseudo-numerical message from 'Fucky64-Encrypt'
#    -File          -->    The encrypted / pseudo-numerical file from 'Fucky64-Encrypt'
#    -Digits        -->    (Optional) Maximum number of digits for a candidate key; defaults to 9
#    -Keys          -->    (Optional) Maximum number of successful candidate keys before stopping
#    -Verbose       -->    (Optional) Live display of the status of every tested key
#    -VeryVerbose   -->    (Optional) Live display of every test for every iteration and tested key
#    -Pipe          -->    (Optional) Only returns an array of successful candidate keys
#
# Example Usage:
#    PS C:\Users\Bobby>$hidden = Fucky64-Encrypt -Message "Joe Biden has dementia." -Key 57422
#    PS C:\Users\Bobby>Fucky64-KeyGenerator -Message $hidden -Keys 3
#     Successful Candidate Key(s):
#       '28711'
#       '57422'
#       '86133'
#    PS C:\Users\Bobby>$Keys = Fucky64-KeyGenerator -Message $hidden -Keys 3 -Pipe
#    PS C:\Users\Bobby>$Keys | % { Fucky64-Decrypt -Message $hidden -Key $_ }
#    Incorrect key.
#    Joe Biden has dementia.
#    Incorrect key.
#    PS C:\Users\Bobby>

    if ( ($File) -and (Test-Path -LiteralPath $File) ) {
        $Message = (Get-Content -LiteralPath $File)
    }
    elseif ( ($File) -and !(Test-Path -LiteralPath $File) )
    {
        Write-Host " File does not exist." -ForegroundColor Red
        break
    }

    $splitmsg = $Message -Replace "[A-Z]", " "
    $splitmsg2 = $splitmsg.split(" ")

    $num = 0
    $keyarray = @()
    $testval = [double]$splitmsg2[0]

    if ( $Digits ) 
    {
        $MaxDigs = $Digits + 1
    }
    else 
    {
        $MaxDigs = 10
    }

    $KeyPassed = 0
    $AlreadyUsedKey = @()
    $SuccessfulKey = @()
    for ($i = 1; $i -lt $MaxDigs; $i++) 
    {
        $Dig = "9" * $i
        $NumDig = $Dig.Length
        $Dig = $Dig -as [int]
        for ($index = 0; $index -lt $splitmsg2.count; $index++) 
        { 
            $testval = [double]$splitmsg2[$index]

            $keyarray = @()
            $num = 0
            for ($key=[int] (1 + ("0" * $i)); $key -lt $Dig; $key++)
            {
                $wholenum = $testval * $key
                if ( ($wholenum -notlike "*.*") -or ($wholenum -like "*.*0000001") -or ($wholenum -like "*.*0000002") -or ($wholenum -like "*.*9999999") -or ($wholenum -like "*.*9999998") )
                {
                    $num += 1
                    $keyarray += $key
                }
            } 

            if ( $VeryVerbose ) 
            {
                Write-Host "`n $num Potential Key(s) found for Iteration $i Index[$index]!" -ForegroundColor Yellow
                Write-Host "   Index[$index] = $testval"
                Write-Host "   Key Digits = $NumDig"
            }

            if ($num -eq "0") {
                if ( $VeryVerbose )
                {
                Write-Host " Skipping to next iteration." -ForegroundColor Yellow
                }
                break
            }

            if ($num -ne "0") 
            { 
                for ($index2 = 0; $index2 -lt $keyarray.count; $index2++) 
                { 
                    $RetestKey = $keyarray[$index2] -as [int]
                    if ( $AlreadyUsedKey -contains $RetestKey ) 
                    {
                        break
                    }
                    $AlreadyUsedKey += $RetestKey
                    if ( $Verbose -or $VeryVerbose )
                    {
                        Write-Host "`n Testing Candidate Key `'$RetestKey`'..." -ForegroundColor Yellow
                    }
                    $TestNumCount = $splitmsg2.count
                    $MaxFailAmount = [math]::Round($TestNumCount / 3)
                    $FailCounter = 0
                    for ($retestindex = 0; $retestindex -lt $TestNumCount; $retestindex++) # Candidate Passed break here
                    {
                        $RetestVal = [double]$splitmsg2[$retestindex]
                        $RetestNum = $RetestVal * $RetestKey
                        
                        if ( ($RetestNum -like "*.*") -and ($RetestNum -notlike "*.*0000001") -and ($RetestNum -notlike "*.*9999999") -and ($RetestNum -notlike "*.*0000002") -and ($RetestNum -notlike "*.*9999998") )
                        {
                            if ( $VeryVerbose )
                            {
                                Write-Host "   Test $retestindex`: `'$RetestVal`' * `'$RetestKey`' = $RetestNum" -ForegroundColor DarkGray
                            }
                            $FailCounter += 1
                        }
                        else {
                            if ( $VeryVerbose ) 
                            {
                            Write-Host "   Test $retestindex`: `'$RetestVal`' * `'$RetestKey`' = $RetestNum"
                            }
                        }
                    }
                    if ( $FailCounter -gt $MaxFailAmount )
                    {
                        if ( $Verbose -or $VeryVerbose )
                        {
                            Write-Host " Candidate Failed $FailCounter / $TestNumCount Tests" -ForegroundColor Red
                        }

                    }
                    elseif ( ( $FailCounter -gt 0 ) -and ( $FailCounter -le $MaxFailAmount ) ) 
                    {
                        if ( $Verbose -or $VeryVerbose )
                        {
                            Write-Host " Candidate Passed, but Failed $FailCounter / $TestNumCount Tests" -ForegroundColor Cyan
                        }
                        $KeyPassed += 1
                        $SuccessfulKey += $RetestKey
                    }
                    elseif ( ($FailCounter -eq 0) -and ($num -ne "0") ) 
                    {
                        if ( $Verbose -or $VeryVerbose ) 
                        {
                            Write-Host " Candidate Passed All Tests!" -ForegroundColor Green
                        }
                        $KeyPassed += 1
                        $SuccessfulKey += $RetestKey
                    }
                    if ( ( $Keys ) -and ( $KeyPassed -ge $Keys ) ) 
                    {
                        $ExitDeepLayer = $true
                        break
                    } 
                }
                if ( $ExitDeepLayer )
                {
                    break
                }
            }  
        }
        if ($ExitDeepLayer)
        {
            break
        }     
    }
    if ( ($KeyPassed -ge 1) -and !($Pipe) )
    {
	    if ( $Verbose -or $VeryVerbose )
	    {
	        Write-Host ""
	    }
            Write-Host " Successful Candidate Key(s):" -ForegroundColor Yellow
            foreach ($dude in $SuccessfulKey)
            {
                    Write-Host "   `'$dude`'" -ForegroundColor Green
            }
	        if ( $Verbose -or $VeryVerbose )
	        {
	            Write-Host ""
	        }
        } 
    else 
    {
	    return $SuccessfulKey
    }
}